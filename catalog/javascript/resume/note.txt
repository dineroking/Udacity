Resume Project

When using the Console of the developer tool in a browser, console.log('string'); will return the string and then it will
say undefined. That is because console.log() does not create any new data as for example when using document.URL.

append() vs prepend();

append() adds the HTML to the end of the matching selector. prepend() adds the HTML to the beginning of the matching
selector.

when using prepend() every time some new tag is prepended it goes to the beginning of the parent element. Because of this
$('div').prepend('html'); <- this html shows second inside the div
$('div').prepend('html'); <- this html shows first inside the div

toUpperCase()

Strings are object and they have indexes that start at 0. For this reason any particular character can be selected and
manipulated by using the array brackets [] with the desired index as shown in the example below.

var s = "audacity";

s = s[1].toUpperCase() + s.slice(2);

true || false
Truthy ( evaluates to true )  = true, non-zero numbers, "strings" ( of at least one character ), objects, arrays, functions
Falsy ( evaluates to false ) = false, 0, "" ( empty strings ), undefined, null, NaN

slice()

The slice function seperates a string characters and returns the characters specified by the range in the parameters. This
also works the same for arrays. For this reason slice() is used to copy an old array into a new one.

oldArray = ['string', 'string2'];
newArray = oldArray.slice(0);

Example of how to turn a string (NeW sTrINg into New STRING)

var name = "AlbERt EINstEiN";

function nameChanger(oldName) {
    var finalName = oldName;
    // Your code goes here!

    var spaceIndex = finalName.indexOf(" ");

    finalName = finalName[0].toUpperCase() + finalName.slice(1, spaceIndex).toLowerCase() +
        " " + finalName.slice(spaceIndex + 1, finalName.length).toUpperCase();

    return finalName;
}

// Did your code work? The line below will tell you!
console.log(nameChanger(name));

This results in Albert EINSTEIN

split()

The split() function can take a string ("Ronny Rosabal") and split it into an array for example "Ronny Rosabal".split(" ")
would result in ["Ronny", "Rosabal]"

join()

The join() function is opposite to split(). It takes an array ["Ronny", "Rosabal"] and join its elements into a single string.
For example ["Ronny", "Rosabal"].join(" ") would result in "Ronny Rosabal".

replace()

It replaces a string with another string. However, only the first occurrence is changed. If multiple occurrences need to
be replace than the /g (global) as the example shows below.

var re = /apples/gi;
var str = 'Apples are round, and apples are juicy.';
var newstr = str.replace(re, 'oranges');
console.log(newstr);  // oranges are round, and oranges are juicy.

sort()


accessing objects properties

var weirdObject = {
    "property": "Time for an astronomy lesson!",
    "property1": "Cameron's minor in college was astronomy",
    "property-2": "The 4 Galilean largest moons of Jupiter are:",
    "property 3": "Io, Ganymede, Callisto, Europa",
    "property$": "Saturn's moon Enceladus has liquid water ocean under its icy surface",
    " property": "The Sun contains 99.87% of the mass of the entire solar system",
    "property()": "There are 5 dwarf planets in our solar system:",
    "property[]": "Pluto, Ceres, Eris, Haumea, Makemake",
    "8property": "Mars has two tiny moons: Phobos and Deimos"
};

var dotNotation0 = true;
var bracketNotation0 = true;

// property1
var dotNotation1 = true;
var bracketNotation1 = true;

// property-2
var dotNotation2 = false;
var bracketNotation2 = true;

// property 3
var dotNotation3 = false;
var bracketNotation3 = true;

// property$
var dotNotation4 = true;
var bracketNotation4 = true;

// *space*property
var dotNotation5 = false;//same as first property
var bracketNotation5 = true;

// property()
var dotNotation6 = false;
var bracketNotation6 = true;

// property[]
var dotNotation7 = false;
var bracketNotation7 = true;

// 8property
var dotNotation8 = false;
var bracketNotation8 = true;


Click Location (jQuery)

$ ( document ).click( function( event ){
  var x = event.pageX; //holds x coordinates of the click
  var y = event.pageY; //holds y coordinates of the click
});

clickLocations = [];// array to hold objects literals with x any y coordinates

function logClicks( x, y ) {
  clickLocations.push( //adds element to the array holding x and y coordinates
    {
      x : x,
      y : y
    }
  );
  console.log( 'x location: ' + x + '; y location: ' + y );
}

$( document ).click( function( loc ) {
  // your code goes here!
  logClicks(loc.pageX, loc.pageY);
} );

In the above case every time there is a click in inside the document element a function is executed that passes an event
Object which has properties of pageX and pageY. pageX holds the distance in pixels from the left of the document element.
pageY holds the distance in pixels from the top of the document element.


SCOPE

There is either local or global scope. In the case of a function a variable declared with var is considered to be local
to the function. If the var declaration is omitted than it is considered a global variable. In the case of "if" statements
and loops, there are no locally declared variables, therefore all variables are considered global.

When declaring a function as "function functionName(){}", the entire function (declaration and definition) gets moved to
the top. When declaring the same function as "var functionName = function(){}", only the declaration get moved to the top.

In the first example the code gives an error because the function has been declared but is called before it is defined:

example2();
var example2 = function() {
    console.log("Ran the example");
}

In the second example the code runs properly becasue the entire function is automatically moved ahead of the call:

example1();
function example1() {
    console.log("Ran the example");
}


~~~~PROBLEM~~~~

We learned about relational operators and how they can classify the relationship between two values. Your job is to
write the function getRelationship(x,y) function, which should return a string representing whether x is >, < or = y. For example:

var rel = getRelationship(2, 3);
console.log(rel); // <
If one or both of the values aren't numbers, your function should output:

"Can't compare relationships because [this value] and [that value] [is]/[are] not [a] number[s]."
where [this value] and [that value] are replaced with the non-numerical values. The sentence should be grammatically
correct by outputting either is or are and pluralizing number if necessary.

For example:

var rel1 = getRelationship("this", 2);
console.log(rel1); // "Can't compare relationships because this is not a number"

var rel2 = getRelationship("that");
console.log(rel2) // "Can't compare relationships because that and undefined are not numbers"
Notice in the second example, because the y value was missing, the output said that undefined was not a number.



~~~~MY SOLUTION~~~~

function getRelationship(x, y) {
    // Your code goes here!
    //save inputs
    var xNum = x;
    var yNum = y;
    var relationship = "";
    var plural = "";
    var numberString = "";
    var andString = "";
    var result;
    //compare inputs
    //when they are not numbers
    if( !isNaN(xNum) && !isNaN(yNum) ){
        if( xNum > yNum ){
        relationship = " > ";
        }else if( xNum < yNum ){
            relationship = " < ";
        }else{
            relationship = " = ";
        }
        //output comparison
        result = xNum + relationship + yNum;

    }else if( isNaN(xNum)  || isNaN(yNum) ){
            andString = "";
            plural = " is";
            numberString = "a number.";
        if( !isNaN(xNum) && isNaN(yNum)){
            xNum = "";
        }else if( isNaN(xNum) && !isNaN(yNum)){
            yNum = "";
        }else{
            andString = " and ";
            plural = " are";
            numberString = "numbers.";
        }
        result = "Can't compare relationships because " + xNum + andString + yNum +
        plural + " not " + numberString;
    }
    return result;
}



~~~~PROBLEM~~~~

Twelve people have walked on the Moon. They are:

Neil Armstrong
Buzz Aldrin
Pete Conrad
Alan Bean
Alan Shepard
Edgar Mitchell
David Scott
James Irwin
John W Young
Charles Duke
Eugene Cernan
Harrison Schmitt

You'll notice that these names are listed in the order that they first stepped on the Moon, not alphabetical order.
To alphabetize them, it would make sense to write their names as lastname, firstname. For example: Neil Armstrong becomes
Armstrong, Neil.

Finish the alphabetizer(_names) function, which takes in a names array (of length N) containing strings of names and
returns an alphabetized array of names in lastname, firstname format.



~~~~MY SOLUTION~~~~

var moonWalkers = [
  "Neil Armstrong",
  "Buzz Aldrin",
  "Pete Conrad",
  "Alan Bean",
  "Alan Shepard",
  "Edgar Mitchell",
  "David Scott",
  "James Irwin",
  "John Young",
  "Charles Duke",
  "Eugene Cernan",
  "Harrison Schmitt"
];

function alphabetizer(names) {
    // Your code goes here!
    //find length of input array
    var arrayLength = names.length;
    var astronauts = [];
    var output = "";
    //take each string in the array and split the name
    for(var i = 0; i < arrayLength; i++){
        var placeHolder = names[i].split(" ");
        //save first name in variable, save last name in variable
        astronauts.push({ first : placeHolder[0], last : placeHolder[1]});

    //save output as last name, first name
    }
    //sort array of objects by last name
    astronauts.sort(function( a, b ){
        var lastA = a.last.toLowerCase();
        var lastB = b.last.toLowerCase();
        if( lastA < lastB ){
            return -1;
        }
        if( lastA > lastB ){
            return 1;
        }
        return 0;
    });

    for(var j = 0; j < astronauts.length; j++){
        output += astronauts[j].last + ", " + astronauts[j].first + "\n";
    }
    //return output
    return output;
}

// Try logging your results to test your code!
console.log(alphabetizer(moonWalkers));



~~~~PROBLEM~~~~

Google's PageSpeed Insights (PSI) scores websites on their speed. A perfect score is 100 and the worst score is 0.
Alongside the score, PSI provides relevant advice for improvements.

By integrating an automated PSI score into a suite of front-end unit tests, you can periodically check a website's
overall speed.

Let's assume you're building the front-end testing framework and you make a call to the PSI API. You receive the JSON
below as a response.

Create a totalBytes(psiResults) function that iterates through pageStats in the psiResults object and returns the total
number of bytes to load the website.

Then, create a ruleList(psiResults) function that iterates through the localizedRuleNames in ruleResults and returns an
array of their strings.



~~~~My SOLUTION~~~~

// Iterate through the localizedRuleNames in ruleResults and
// return an array of their strings.
function ruleList(results) {
    // Your code goes here!
    var output = [];
    for(var string in results.formattedResults.ruleResults.AvoidBadRequests.localizedRuleName){
        output.push(results.formattedResults.ruleResults.AvoidBadRequests.localizedRuleName[string]);
    }
    return output;
}

// Iterate through pageStats in the psiResults object and
// return the total number of bytes to load the website.
function totalBytes(results) {
    // Your code goes here!
    var output = 0;
    for(var string in results.pageStats){
        if(string.endsWith("Bytes")){
            output += parseInt(results.pageStats[string], 10);
        }
    }
    return output;
}